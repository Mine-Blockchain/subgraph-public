// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddPool extends ethereum.Event {
  get params(): AddPool__Params {
    return new AddPool__Params(this);
  }
}

export class AddPool__Params {
  _event: AddPool;

  constructor(event: AddPool) {
    this._event = event;
  }

  get pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get depositToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get rewardToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RemovePool extends ethereum.Event {
  get params(): RemovePool__Params {
    return new RemovePool__Params(this);
  }
}

export class RemovePool__Params {
  _event: RemovePool;

  constructor(event: RemovePool) {
    this._event = event;
  }

  get pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class StakeChange extends ethereum.Event {
  get params(): StakeChange__Params {
    return new StakeChange__Params(this);
  }
}

export class StakeChange__Params {
  _event: StakeChange;

  constructor(event: StakeChange) {
    this._event = event;
  }

  get pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fromAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get toAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PolkaminePoolManager__poolsResult {
  value0: Address;
  value1: Address;
  value2: Address;

  constructor(value0: Address, value1: Address, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }
}

export class PolkaminePoolManager extends ethereum.SmartContract {
  static bind(address: Address): PolkaminePoolManager {
    return new PolkaminePoolManager("PolkaminePoolManager", address);
  }

  addPool(
    _depositToken: Address,
    _rewardToken: Address,
    _doubleRewardToken: Address
  ): BigInt {
    let result = super.call(
      "addPool",
      "addPool(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_depositToken),
        ethereum.Value.fromAddress(_rewardToken),
        ethereum.Value.fromAddress(_doubleRewardToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_addPool(
    _depositToken: Address,
    _rewardToken: Address,
    _doubleRewardToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addPool",
      "addPool(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_depositToken),
        ethereum.Value.fromAddress(_rewardToken),
        ethereum.Value.fromAddress(_doubleRewardToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addressManager(): Address {
    let result = super.call("addressManager", "addressManager():(address)", []);

    return result[0].toAddress();
  }

  try_addressManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "addressManager",
      "addressManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isDeprecatedPool(param0: BigInt): boolean {
    let result = super.call(
      "isDeprecatedPool",
      "isDeprecatedPool(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_isDeprecatedPool(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDeprecatedPool",
      "isDeprecatedPool(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  poolLength(): BigInt {
    let result = super.call("poolLength", "poolLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolLength", "poolLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolStakes(param0: BigInt): BigInt {
    let result = super.call("poolStakes", "poolStakes(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_poolStakes(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolStakes", "poolStakes(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pools(param0: BigInt): PolkaminePoolManager__poolsResult {
    let result = super.call(
      "pools",
      "pools(uint256):(address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new PolkaminePoolManager__poolsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress()
    );
  }

  try_pools(
    param0: BigInt
  ): ethereum.CallResult<PolkaminePoolManager__poolsResult> {
    let result = super.tryCall(
      "pools",
      "pools(uint256):(address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PolkaminePoolManager__poolsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress()
      )
    );
  }

  userStakes(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "userStakes",
      "userStakes(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_userStakes(param0: BigInt, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userStakes",
      "userStakes(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddPoolCall extends ethereum.Call {
  get inputs(): AddPoolCall__Inputs {
    return new AddPoolCall__Inputs(this);
  }

  get outputs(): AddPoolCall__Outputs {
    return new AddPoolCall__Outputs(this);
  }
}

export class AddPoolCall__Inputs {
  _call: AddPoolCall;

  constructor(call: AddPoolCall) {
    this._call = call;
  }

  get _depositToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rewardToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _doubleRewardToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AddPoolCall__Outputs {
  _call: AddPoolCall;

  constructor(call: AddPoolCall) {
    this._call = call;
  }

  get pid(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _addressManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RemovePoolCall extends ethereum.Call {
  get inputs(): RemovePoolCall__Inputs {
    return new RemovePoolCall__Inputs(this);
  }

  get outputs(): RemovePoolCall__Outputs {
    return new RemovePoolCall__Outputs(this);
  }
}

export class RemovePoolCall__Inputs {
  _call: RemovePoolCall;

  constructor(call: RemovePoolCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemovePoolCall__Outputs {
  _call: RemovePoolCall;

  constructor(call: RemovePoolCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}
